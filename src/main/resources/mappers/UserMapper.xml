<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dev.bbs.study.csw.mappers.IUserMapper">
    <insert id="insertUser" parameterType="dev.bbs.study.csw.vos.RegisterVo">
        INSERT INTO `git_bbs`.`users`(`email`, `password`, `nickname`, `name_first`, `name_optional`, `name_last`,
                                      `contact_first`, `contact_second`, `contact_third`, `address_post`,
                                      `address_primary`, `address_secondary`)
        VALUES (#{email}, #{hashedPassword}, #{nickname}, #{nameFirst}, #{nameOptional}, #{nameLast},
                #{contactFirst}, #{contactSecond}, #{contactThird}, #{addressPost},
                #{addressPrimary}, #{addressSecondary})
    </insert>

    <select id="selectEmailCount" resultType="_int">
        SELECT COUNT(`index`)
        FROM `git_bbs`.`users`
        WHERE `email` = #{email}
    </select>

    <select id="selectNicknameCount" resultType="_int">
        SELECT COUNT(`index`)
        FROM `git_bbs`.`users`
        WHERE `nickname` = #{nickname}
    </select>

    <select id="selectUser" parameterType="dev.bbs.study.csw.vos.LoginVo" resultType="dev.bbs.study.csw.dtos.UserDto">
        SELECT `index`             AS `index`,
               `email`             AS `email`,
               `password`          AS `password`,
               `nickname`          AS `nickname`,
               `name_first`        AS `nameFirst`,
               `name_optional`     AS `nameOptional`,
               `name_last`         AS `nameLast`,
               `contact_first`     AS `contactFirst`,
               `contact_second`    AS `contactSecond`,
               `contact_third`     AS `contactThird`,
               `address_post`      AS addressPost,
               `address_primary`   AS addressPrimary,
               `address_secondary` AS addressSecondary,
               `level`             AS `level`
        FROM `git_bbs`.`users`
        WHERE `email` = #{email}
          AND `password` = #{hashedPassword} LIMIT 1
    </select>

    <insert id="insertAutoSignKey">
        INSERT INTO `git_bbs`.`login_auto_sign_keys` (`user_email`, `key`, `expires_key`)
        VALUES (#{email}, #{key}, DATE_ADD(NOW(), INTERVAL #{days} DAY))
    </insert>

    <select id="selectUserFromCookie" resultType="dev.bbs.study.csw.dtos.UserDto">
        SELECT `user`.`index`             AS `index`,
               `user`.`email`             AS `email`,
               `user`.`password`          AS `password`,
               `user`.`nickname`          AS `nickname`,
               `user`.`name_first`        AS `nameFirst`,
               `user`.`name_optional`     AS `nameOptional`,
               `user`.`name_last`         AS `nameLast`,
               `user`.`contact_first`     AS `contactFirst`,
               `user`.`contact_second`    AS `contactSecond`,
               `user`.`contact_third`     AS `contactThird`,
               `user`.`address_post`      AS `addressPost`,
               `user`.`address_primary`   AS `addressPrimary`,
               `user`.`address_secondary` AS `addressSecondary`,
               `user`.`level`             AS `level`
        FROM `git_bbs`.`login_auto_sign_keys` AS `key`
                 LEFT JOIN `git_bbs`.`users` AS `user` ON `key`.`user_email` = `user`.`email`
        WHERE `key`.`key` = #{key}
          AND `key`.`expires_key` > NOW()
          AND `key`.`expired_flag` = FALSE LIMIT 1
    </select>

    <update id="updateAutoSignKeyDay">
        UPDATE `git_bbs`.`login_auto_sign_keys`
        SET `expires_key` = DATE_ADD(NOW(), INTERVAL #{days} DAY)
        WHERE `key` = #{key}
          AND `expires_key` > NOW()
          AND `expired_flag` = FALSE LIMIT 1
    </update>

    <update id="updateAutoSignKeyExpiry">
        UPDATE `git_bbs`.`login_auto_sign_keys`
        SET `expired_flag` = 1
        WHERE `key` = #{key} LIMIT 1
    </update>

    <select id="selectEmail" parameterType="dev.bbs.study.csw.vos.Lost_emailSendCodeVo" resultType="String">
        SELECT `email`
        FROM `git_bbs`.`users`
        WHERE `name_first` = #{nameFirst}
          AND `name_optional` = #{nameOptional}
          AND `name_last` = #{nameLast}
          AND `contact_first` = #{contactFirst}
          AND `contact_second` = #{contactSecond}
          AND `contact_third` = #{contactThird} LIMIT 1
    </select>

    <insert id="insertLostEmailAuthCode">
        INSERT INTO `git_bbs`.`lost_email` (`email`, `code`, `key`, `ip`, `expires_at`)
            VALUE ( #{email}, #{code}, #{key}, #{ip}, DATE_ADD(NOW(), INTERVAL #{minutes} MINUTE))
    </insert>

    <select id="selectEmailByAuthCodeFromEmail" resultType="String">
        SELECT `email`
        FROM `git_bbs`.`lost_email`
        WHERE `code` = #{authCode}
          AND `key` = #{key}
          AND `ip` = #{ip}
          AND `expired_flag` = FALSE
    </select>

    <update id="updateEmailAuthCodeExpired">
        UPDATE `git_bbs`.`lost_email`
        SET `expires_at`   = NOW(),
            `expired_flag` = TRUE
        WHERE `key` = #{key} LIMIT 1
    </update>

    <select id="selectUserCount" resultType="_int">
        SELECT COUNT(`index`)
        FROM `git_bbs`.`users`
        WHERE `email` = #{email}
          AND `nameFirst` = #{nameFirst}
          AND `nameLast` = #{nameLast}
          AND `contactFirst` = #{contactFirst}
          AND `contactSecond` = #{contactSecond}
          AND `contactThrid` = #{contactThrid}
    </select>

    <select id="selectEmailByAuthCodeFromPassword" resultType="_int">
        SELECT COUNT(`index`)
        FROM `git_bbs`.`lost_password`
        WHERE `email` = #{email}
          AND `code` = #{authcode}
          AND `ip` = #{ip}
          AND `key` = #{key}
    </select>

    <update id="updatePasswordAuthCodeExpired">
        UPDATE `git_bbs`.`lost_password`
        SET `expired_flag` = TRUE
        WHERE `key` = #{key} LIMIT 1
    </update>

    <update id="updateUserPassword">
        UPDATE `git_bbs`.`users`
        SET `password` = #{password}
        WHERE `email` = #{email} LIMIT 1
    </update>
</mapper>